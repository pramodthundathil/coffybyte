# Generated by Django 5.2.4 on 2025-07-31 07:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('license_key', models.CharField(max_length=255, unique=True)),
                ('license_type', models.CharField(choices=[('trial', 'Trial'), ('standard', 'Standard'), ('premium', 'Premium')], max_length=50)),
                ('issued_to', models.CharField(max_length=255)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'licenses',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(max_length=254)),
                ('pin', models.IntegerField()),
                ('is_super_admin', models.BooleanField(default=False)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('store_code', models.CharField(max_length=50, unique=True)),
                ('owner_name', models.CharField(max_length=255)),
                ('business_type', models.CharField(choices=[('restaurant', 'Restaurant'), ('cafe', 'Cafe'), ('retail', 'Retail'), ('bakery', 'Bakery')], max_length=100)),
                ('subscription_plan', models.CharField(choices=[('basic', 'Basic'), ('premium', 'Premium'), ('enterprise', 'Enterprise')], default='basic', max_length=50)),
                ('subscription_expires_at', models.DateTimeField(blank=True, null=True)),
                ('logo_url', models.URLField(blank=True)),
                ('primary_contact', models.JSONField(default=dict)),
                ('address', models.JSONField(default=dict)),
                ('tax_settings', models.JSONField(default=dict)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('business_hours', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('license_key', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.license')),
            ],
            options={
                'db_table': 'stores',
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('branch_code', models.CharField(max_length=50)),
                ('address', models.JSONField(default=dict)),
                ('contact_info', models.JSONField(default=dict)),
                ('manager_contact', models.JSONField(default=dict)),
                ('is_main_branch', models.BooleanField(default=False)),
                ('seating_capacity', models.IntegerField(blank=True, null=True)),
                ('kitchen_printer_config', models.JSONField(default=dict)),
                ('receipt_printer_config', models.JSONField(default=dict)),
                ('pos_settings', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='authentication.store')),
            ],
            options={
                'db_table': 'branches',
                'unique_together': {('store', 'branch_code')},
            },
        ),
        migrations.CreateModel(
            name='BranchUser',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('store_owner', 'Store Owner'), ('store_manager', 'Store Manager'), ('branch_manager', 'Branch Manager'), ('cashier', 'Cashier'), ('chef', 'Chef'), ('waiter', 'Waiter')], max_length=50)),
                ('permissions', models.JSONField(default=list)),
                ('can_open_shift', models.BooleanField(default=False)),
                ('can_close_shift', models.BooleanField(default=False)),
                ('max_discount_percent', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branch_users', to='authentication.branch')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branch_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'branch_users',
                'unique_together': {('branch', 'user')},
            },
        ),
        migrations.CreateModel(
            name='POSDevice',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_name', models.CharField(max_length=255)),
                ('device_code', models.CharField(max_length=50)),
                ('device_type', models.CharField(choices=[('main_counter', 'Main Counter'), ('kitchen_display', 'Kitchen Display'), ('mobile', 'Mobile Device'), ('tablet', 'Tablet')], max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('mac_address', models.CharField(blank=True, max_length=17)),
                ('printer_config', models.JSONField(default=dict)),
                ('last_active_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pos_devices', to='authentication.branch')),
            ],
            options={
                'db_table': 'pos_devices',
                'unique_together': {('branch', 'device_code')},
            },
        ),
        migrations.CreateModel(
            name='StoreUser',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('store_owner', 'Store Owner'), ('store_manager', 'Store Manager'), ('branch_manager', 'Branch Manager'), ('cashier', 'Cashier'), ('chef', 'Chef'), ('waiter', 'Waiter')], max_length=50)),
                ('permissions', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_users', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_users', to='authentication.store')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'store_users',
                'unique_together': {('store', 'user')},
            },
        ),
    ]
